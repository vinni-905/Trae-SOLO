// Monaco Editor setup
require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs' }});
require(["vs/editor/editor.main"], function () {
  window.editor = monaco.editor.create(document.getElementById("editor"), {
    value: "// Select a file from the sidebar to load its contents...",
    language: "javascript",
    theme: "vs-dark",
    fontSize: 14,
  });
});

// Dummy file contents
let files = {
  "main.py": "print('Hello from main.py!')",
  "index.html": "<!DOCTYPE html>\n<html>\n<head><title>Demo</title></head>\n<body>\n<h1>Hello World</h1>\n</body>\n</html>",
  "style.css": "body { background: #eee; font-family: Arial; }",
  "script.js": "console.log('Hello from script.js!');",
  "README.md": "# Trae SOLO IDE\nThis is a demo file explorer + editor."
};

// Track selected file
let selectedFileLi = null;

// Open file in editor
function openFile(filename, liElement) {
  const content = files[filename] || "";
  const ext = filename.split(".").pop();
  let lang = "plaintext";
  if (ext === "py") lang = "python";
  else if (ext === "js") lang = "javascript";
  else if (ext === "html") lang = "html";
  else if (ext === "css") lang = "css";

  editor.setValue(content);
  monaco.editor.setModelLanguage(editor.getModel(), lang);

  // Highlight selected file
  if (selectedFileLi) selectedFileLi.classList.remove("selected");
  liElement.classList.add("selected");
  selectedFileLi = liElement;
}

// Live typing auto-complete
function autoComplete() {
  const suggestion = [
    "// AI suggests more code here...",
    "function greet(name) {",
    "    console.log('Hello, ' + name + '!');",
    "}",
    "greet('World');"
  ];

  let i = 0;
  const typingInterval = setInterval(() => {
    const currentValue = editor.getValue();
    editor.setValue(currentValue + (currentValue ? "\n" : "") + suggestion[i]);
    i++;
    if (i >= suggestion.length) clearInterval(typingInterval);
  }, 400); // 400ms per line ‚Üí live typing effect
}

// Dynamic project generator
function generateProject() {
  const newProject = {
    "app": {
      "main.py": "print('Hello from app/main.py')",
      "utils.py": "def helper():\n    return 'Helper function'"
    },
    "web": {
      "index.html": "<!DOCTYPE html>\n<html>\n<body>\n<h1>Welcome to Trae SOLO</h1>\n</body>\n</html>",
      "style.css": "body { font-family: Arial; background: #fafafa; }"
    },
    "README.md": "# Generated Project\nThis is a mock project generated by Trae SOLO IDE."
  };

  const fileList = document.getElementById("file-list");
  fileList.innerHTML = "";
  selectedFileLi = null; // reset selection

  function renderTree(tree, parentUl = fileList) {
    for (let key in tree) {
      const li = document.createElement("li");

      if (typeof tree[key] === "string") {
        li.textContent = key;
        li.classList.add("file");
        li.onclick = (e) => {
          e.stopPropagation();
          openFile(key, li);
        };
      } else {
        li.textContent = "üìÅ " + key;
        li.style.cursor = "pointer";

        const ul = document.createElement("ul");
        ul.style.listStyle = "none";
        ul.style.paddingLeft = "15px";
        ul.style.display = "none"; // start collapsed
        li.appendChild(ul);

        li.onclick = (e) => {
          e.stopPropagation();
          if (ul.style.display === "none") {
            ul.style.display = "block";
            li.textContent = "üìÇ " + key; // open folder icon
          } else {
            ul.style.display = "none";
            li.textContent = "üìÅ " + key; // closed folder icon
          }
        };

        renderTree(tree[key], ul);
      }

      parentUl.appendChild(li);
    }
  }

  renderTree(newProject);
  files = flattenFiles(newProject);
  alert("üìÇ Mock Project Generated! Click files to view in editor.");
}

// Flatten project structure
function flattenFiles(tree) {
  let result = {};
  for (let key in tree) {
    if (typeof tree[key] === "string") result[key] = tree[key];
    else Object.assign(result, flattenFiles(tree[key]));
  }
  return result;
}

// Chat box with backend integration
async function sendMessage(event) {
  if (event.key === "Enter") {
    const input = document.getElementById("chat-input");
    const msg = input.value.trim();
    if (!msg) return;

    const chatBox = document.getElementById("chat-box");

    // User message
    const userDiv = document.createElement("div");
    userDiv.className = "chat-message user";
    userDiv.textContent = msg;
    chatBox.appendChild(userDiv);
    input.value = "";
    chatBox.scrollTop = chatBox.scrollHeight;

    // Call Flask backend
    try {
      const response = await fetch("http://127.0.0.1:5000/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: msg }),
      });
      const data = await response.json();

      const aiDiv = document.createElement("div");
      aiDiv.className = "chat-message ai";
      aiDiv.textContent = data.reply;
      chatBox.appendChild(aiDiv);
      chatBox.scrollTop = chatBox.scrollHeight;
    } catch (err) {
      console.error(err);
      const aiDiv = document.createElement("div");
      aiDiv.className = "chat-message ai";
      aiDiv.textContent = "‚ùå Error: Could not reach backend";
      chatBox.appendChild(aiDiv);
    }
  }
}
